import streamlit as st
import pandas as pd
import numpy as np
import xgboost as xgb
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score, precision_score, recall_score, roc_auc_score
import matplotlib.pyplot as plt
import seaborn as sns
import time


# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data(file):
    if file.name.endswith(".csv"):
        return pd.read_csv(file)
    else:
        return pd.read_excel(file)


# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
@st.cache_data
def encode_categorical(df):
    label_encoders = {}
    for col in df.select_dtypes(include=['object']).columns:
        le = LabelEncoder()
        df[col] = le.fit_transform(df[col])
        label_encoders[col] = le
    return df, label_encoders

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
@st.cache_resource
def train_xgboost(X_train, y_train):
    model = xgb.XGBClassifier(
        n_estimators=100,
        learning_rate=0.1,
        max_depth=6,
        random_state=42,
        use_label_encoder=False,
        eval_metric="logloss",
        n_jobs=-1  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —è–¥—Ä–∞
    )
    model.fit(X_train, y_train)
    return model


st.title("üöÄ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ XGBoost –Ω–∞ 70% –¥–∞–Ω–Ω—ã—Ö")

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV –∏–ª–∏ Excel-—Ñ–∞–π–ª", type=["csv", "xlsx", "xls"])
if uploaded_file is not None:
    df = load_data(uploaded_file)
    st.write("### –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö:")
    st.dataframe(df.head())

    target_column = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é (—Ç–∞—Ä–≥–µ—Ç)", df.columns, index=None,
    placeholder="–¢–∞—Ä–≥–µ—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω")

    if target_column is not None:
        X = df.drop(columns=[target_column])
        y = df[target_column]

        X, label_encoders = encode_categorical(X)

        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

        y_train = LabelEncoder().fit_transform(y_train)

        st.write(f"**–†–∞–∑–º–µ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–π –≤—ã–±–æ—Ä–∫–∏:** {X_train.shape[0]} —Å—Ç—Ä–æ–∫")
        st.write(f"**–†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏:** {X_test.shape[0]} —Å—Ç—Ä–æ–∫")

        # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        start_time = time.time()
        model = train_xgboost(X_train, y_train)
        train_time = time.time() - start_time
        st.write(f"‚úÖ **–ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –∑–∞ {train_time:.2f} —Å–µ–∫—É–Ω–¥**")

        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        y_pred = model.predict(X_test)
        y_pred_proba = model.predict_proba(X_test)[:, 1]

        # –ú–µ—Ç—Ä–∏–∫–∏
        st.write("### üî• –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–¥–µ–ª–∏:")
        st.write(f"‚úÖ **Accuracy:** {accuracy_score(y_test, y_pred):.4f}")
        st.write(f"‚úÖ **Precision:** {precision_score(y_test, y_pred, average='weighted'):.4f}")
        st.write(f"‚úÖ **Recall:** {recall_score(y_test, y_pred, average='weighted'):.4f}")
        st.write(f"‚úÖ **ROC AUC:** {roc_auc_score(y_test, y_pred_proba):.4f}")

        # –ì—Ä–∞—Ñ–∏–∫ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        st.write("### –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        feature_importances = pd.DataFrame(
            {"Feature": X.columns, "Importance": model.feature_importances_}
        ).sort_values(by="Importance", ascending=False)

        fig, ax = plt.subplots(figsize=(10, 177))
        sns.barplot(x="Importance", y="Feature", data=feature_importances, ax=ax)
        st.pyplot(fig)

        feature_importances.reset_index(drop=True, inplace=True)
        st.dataframe(feature_importances)

        st.success("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

        # –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –≤—Ä—É—á–Ω—É—é
        st.write("### üîç –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤—ã–ø–ª–∞—Ç—ã –∫—Ä–µ–¥–∏—Ç–∞")
        input_data = {}
        for col in X.columns:
            if col in label_encoders:
                options = list(label_encoders[col].classes_)
                selected = st.selectbox(f"{col}", options)
                input_data[col] = label_encoders[col].transform([selected])[0]
            else:
                input_data[col] = st.number_input(f"{col}", value=float(X[col].median()))

        if st.button("–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–ø–ª–∞—Ç—ã –∫—Ä–µ–¥–∏—Ç–∞"):
            input_df = pd.DataFrame([input_data])
            probability = model.predict_proba(input_df)[:, 1][0]
            st.write(f"üîÆ **–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–ø–ª–∞—Ç—ã –∫—Ä–µ–¥–∏—Ç–∞:** {probability:.4f}")
